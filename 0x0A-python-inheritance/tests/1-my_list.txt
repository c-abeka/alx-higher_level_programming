============
1-my_list.py
============

This module defines a class MyList that inherits from list

It can be instantiated with no arguments returning an empty list

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>


Test case #0: empty list
>>> print(my_list)
[]

>>> my_list.print_sorted()
[]

>>> my_list = MyList([3,6,2,4])
>>> print(my_list)
[3, 6, 2, 4]

>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

Test case #1: to order a disordered list of positive integers
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 3, 5]

>>> my_list.print_sorted()
[1, 3, 4, 5]

>>> print(my_list)
[1, 4, 3, 5]

Test case #2: order negative integers
>>> my_list = MyList()
>>> my_list.append(-1)
>>> my_list.append(-4)
>>> my_list.append(-2)
>>> print(my_list)
[-1, -4, -2]

>>> my_list.print_sorted()
[-4, -2, -1]

Test case #3: do nothing
>>> my_list = MyList()
>>> my_list.append(-4)
>>> my_list.append(-2)
>>> my_list.append(-1)
>>> print(my_list)
[-4, -2, -1]

>>> my_list.print_sorted()
[-4, -2, -1]

Attribute Errors
================

Test case #4: invalis tuples
>>> my_list = (1, 2)
>>> print(my_list)
(1, 2)

>>> my_list.print_sorted()
Traceback (most recent call last):
AttributeError: 'tuple' object has no attribute 'print_sorted'

>>> print(my_list)
(1, 2)
